/*
The mall management is trying to figure out what was the busiest moment in the mall in the last year.
You are given data from the door detectors: each data entry includes a timestamp (seconds in Unix Epoch format), an amount of people and whether they entered or exited.
Example of a data entry: (time, amount of people, E(enter)/X(exit)
1440084737   4  E  
Find what was the busiest period in the mall on the last year. Print two Epoch timestamps representing the beginning and end of that period. You may assume that the data your are given is accurate and that each second with entries or exits is recorded. Implement the most efficient solution possible.

Please note: 
1. There may be many door detectors so there may be multiple entries for same timestamp.
2. data is not necessarily in sorted order of timestamp.

input format:
    number n followed by n observations - each observation is long, int, String (timestamp, count, E/X)
Output :
  long long (beginning of period and end of period)

Ex:
Input
6
1472568095461 59 E
 1472620192731  50 X
 1472630264983  5 X
 1472635488880 59 E
 1472641430597 60 X
1472635488880 2 X
Output: 

1472635488880 1472641430597
*/

import java.util.*;
// Other imports go here
// Do NOT change the class name
class tstamp implements Comparable<tstamp>{
  long time;
  int pop;
  char c;
  public tstamp(long t, int p, char ch)
  {
    time = t;
    pop = p;
    c = ch;
  }
  public int compareTo(tstamp ob) {
      if(this.time>ob.time)
        return 1;
    else if (this.time == ob.time)
      return 0;
    else
      return -1;
  }
}
class Main
{
    public static void main(String[] args)
    {
      int n;
      int p;
      long ts;
      char ch;
      Scanner scan = new Scanner(System.in);
      n = scan.nextInt();
      tstamp arr[] = new tstamp[n];
      int i;
      for(i=0;i<n;i++)
      {
        ts = scan.nextLong();
        p = scan.nextInt();
        ch = scan.next().charAt(0);
        arr[i] = new tstamp(ts,p,ch);
      }
      Arrays.sort(arr);
      int total=0;
      int len = n-1;
      int max =0;
      long res[]=new long[10];
      for(i=0;i<=len;i++)
      {
        if(arr[i].c=='E')
        {
          total = total+arr[i].pop;
        }
        else if(arr[i].c=='X')
        {
          total = total - arr[i].pop;
        }
        if(i<len&&arr[i].time==arr[i+1].time)
          continue;
        if(total>max)
        {
          max = total;
          res[0]=arr[i].time;
          if(i<len)
            res[1] = arr[i+1].time;
          else if(i==len)
            res[1]=arr[i].time;
        }
      }
      System.out.println(res[0]+" "+res[1]);
    }
    }
